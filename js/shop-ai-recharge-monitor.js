/**
 * Shop-AI Recharge Monitor
 * Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n real-time
 */

class ShopAIRechargeMonitor {
    constructor() {
        this.checkInterval = null;
        this.qrCode = null;
        this.amount = null;
        this.userId = null;
        this.maxChecks = 900; // 15 ph√∫t * 60 gi√¢y = 900 l·∫ßn check
        this.currentChecks = 0;
        this.isChecking = false;
    }

    // B·∫Øt ƒë·∫ßu monitoring
    startMonitoring(qrCode, amount, userId) {
        this.qrCode = qrCode;
        this.amount = amount;
        this.userId = userId;
        this.currentChecks = 0;
        this.isChecking = true;

        console.log(`üîÑ B·∫Øt ƒë·∫ßu monitoring QR: ${qrCode}, Amount: ${amount}, User: ${userId}`);
        
        // Hi·ªÉn th·ªã tr·∫°ng th√°i
        this.updateStatus('ƒêang ch·ªù thanh to√°n...', 'info');
        this.showCountdown();
        
        // B·∫Øt ƒë·∫ßu check m·ªói gi√¢y
        this.checkInterval = setInterval(() => {
            this.checkPaymentStatus();
        }, 1000);
    }

    // D·ª´ng monitoring
    stopMonitoring() {
        if (this.checkInterval) {
            clearInterval(this.checkInterval);
            this.checkInterval = null;
        }
        this.isChecking = false;
        console.log('‚èπÔ∏è D·ª´ng monitoring');
    }

    // Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n
    async checkPaymentStatus() {
        if (!this.isChecking) return;

        this.currentChecks++;
        
        // C·∫≠p nh·∫≠t countdown
        const remainingTime = Math.max(0, this.maxChecks - this.currentChecks);
        this.updateCountdown(remainingTime);

        // H·∫øt th·ªùi gian
        if (this.currentChecks >= this.maxChecks) {
            this.handleTimeout();
            return;
        }

        try {
            const response = await fetch('shop-ai.php?action=check_payment_status', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    qr_code: this.qrCode,
                    amount: this.amount,
                    user_id: this.userId
                })
            });

            const data = await response.json();
            
            if (data.success) {
                if (data.status === 'completed') {
                    this.handlePaymentSuccess(data);
                } else if (data.status === 'expired') {
                    this.handleExpired();
                }
                // N·∫øu status l√† 'pending', ti·∫øp t·ª•c check
            } else {
                console.warn('Check payment error:', data.message);
            }

        } catch (error) {
            console.error('Network error:', error);
        }
    }

    // X·ª≠ l√Ω thanh to√°n th√†nh c√¥ng
    handlePaymentSuccess(data) {
        this.stopMonitoring();
        this.updateStatus('‚úÖ Thanh to√°n th√†nh c√¥ng!', 'success');
        
        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        this.showSuccessMessage(data);
        
        // T·ª± ƒë·ªông reload sau 3 gi√¢y
        setTimeout(() => {
            window.location.reload();
        }, 3000);
    }

    // X·ª≠ l√Ω h·∫øt th·ªùi gian
    handleTimeout() {
        this.stopMonitoring();
        this.updateStatus('‚è∞ H·∫øt th·ªùi gian ch·ªù thanh to√°n', 'warning');
        this.showTimeoutMessage();
    }

    // X·ª≠ l√Ω QR code h·∫øt h·∫°n
    handleExpired() {
        this.stopMonitoring();
        this.updateStatus('‚ö†Ô∏è QR code ƒë√£ h·∫øt h·∫°n', 'warning');
        this.showExpiredMessage();
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i
    updateStatus(message, type = 'info') {
        const statusElement = document.getElementById('payment-status');
        if (statusElement) {
            statusElement.innerHTML = `<div class="alert alert-${type}">${message}</div>`;
        }
    }

    // Hi·ªÉn th·ªã countdown
    showCountdown() {
        const countdownElement = document.getElementById('payment-countdown');
        if (countdownElement) {
            countdownElement.style.display = 'block';
        }
    }

    // C·∫≠p nh·∫≠t countdown
    updateCountdown(remainingSeconds) {
        const minutes = Math.floor(remainingSeconds / 60);
        const seconds = remainingSeconds % 60;
        const timeString = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        
        const countdownElement = document.getElementById('countdown-timer');
        if (countdownElement) {
            countdownElement.textContent = timeString;
        }

        // C·∫≠p nh·∫≠t progress bar
        const progressElement = document.getElementById('countdown-progress');
        if (progressElement) {
            const percentage = (remainingSeconds / this.maxChecks) * 100;
            progressElement.style.width = `${percentage}%`;
            
            // ƒê·ªïi m√†u khi g·∫ßn h·∫øt th·ªùi gian
            if (percentage < 20) {
                progressElement.className = 'progress-bar bg-danger';
            } else if (percentage < 50) {
                progressElement.className = 'progress-bar bg-warning';
            } else {
                progressElement.className = 'progress-bar bg-info';
            }
        }
    }

    // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
    showSuccessMessage(data) {
        const successHtml = `
            <div class="alert alert-success">
                <h5>üéâ N·∫°p ti·ªÅn th√†nh c√¥ng!</h5>
                <p><strong>S·ªë ti·ªÅn:</strong> ${this.formatMoney(data.amount)} VNƒê</p>
                <p><strong>S·ªë d∆∞ m·ªõi:</strong> ${this.formatMoney(data.new_balance)} VNƒê</p>
                <p><strong>M√£ giao d·ªãch:</strong> ${data.transaction_id}</p>
                <small>Trang s·∫Ω t·ª± ƒë·ªông t·∫£i l·∫°i sau 3 gi√¢y...</small>
            </div>
        `;
        
        const messageElement = document.getElementById('payment-message');
        if (messageElement) {
            messageElement.innerHTML = successHtml;
        }
    }

    // Hi·ªÉn th·ªã th√¥ng b√°o h·∫øt th·ªùi gian
    showTimeoutMessage() {
        const timeoutHtml = `
            <div class="alert alert-warning">
                <h5>‚è∞ H·∫øt th·ªùi gian ch·ªù</h5>
                <p>QR code ƒë√£ h·∫øt th·ªùi gian hi·ªáu l·ª±c. Vui l√≤ng t·∫°o m√£ QR m·ªõi ƒë·ªÉ ti·∫øp t·ª•c n·∫°p ti·ªÅn.</p>
                <button class="btn btn-primary" onclick="location.reload()">T·∫°o QR m·ªõi</button>
            </div>
        `;
        
        const messageElement = document.getElementById('payment-message');
        if (messageElement) {
            messageElement.innerHTML = timeoutHtml;
        }
    }

    // Hi·ªÉn th·ªã th√¥ng b√°o h·∫øt h·∫°n
    showExpiredMessage() {
        const expiredHtml = `
            <div class="alert alert-warning">
                <h5>‚ö†Ô∏è QR code h·∫øt h·∫°n</h5>
                <p>QR code ƒë√£ h·∫øt h·∫°n. Vui l√≤ng t·∫°o m√£ QR m·ªõi ƒë·ªÉ ti·∫øp t·ª•c n·∫°p ti·ªÅn.</p>
                <button class="btn btn-primary" onclick="location.reload()">T·∫°o QR m·ªõi</button>
            </div>
        `;
        
        const messageElement = document.getElementById('payment-message');
        if (messageElement) {
            messageElement.innerHTML = expiredHtml;
        }
    }

    // Format s·ªë ti·ªÅn
    formatMoney(amount) {
        return new Intl.NumberFormat('vi-VN').format(amount);
    }
}

// Global instance
let rechargeMonitor = null;

// Kh·ªüi t·∫°o monitoring khi c√≥ QR code
function startRechargeMonitoring(qrCode, amount, userId) {
    if (rechargeMonitor) {
        rechargeMonitor.stopMonitoring();
    }
    
    rechargeMonitor = new ShopAIRechargeMonitor();
    rechargeMonitor.startMonitoring(qrCode, amount, userId);
}

// D·ª´ng monitoring
function stopRechargeMonitoring() {
    if (rechargeMonitor) {
        rechargeMonitor.stopMonitoring();
    }
}

// Auto cleanup khi r·ªùi kh·ªèi trang
window.addEventListener('beforeunload', function() {
    stopRechargeMonitoring();
});

// Export cho s·ª≠ d·ª•ng global
window.ShopAIRechargeMonitor = ShopAIRechargeMonitor;
window.startRechargeMonitoring = startRechargeMonitoring;
window.stopRechargeMonitoring = stopRechargeMonitoring;
